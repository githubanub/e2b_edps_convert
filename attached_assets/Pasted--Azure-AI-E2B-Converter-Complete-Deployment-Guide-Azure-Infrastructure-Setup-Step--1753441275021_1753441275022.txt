# Azure AI E2B Converter - Complete Deployment Guide

## **Azure Infrastructure Setup**

### **Step 1: Create Azure Resources**

#### **1.1 Azure OpenAI Service**
```bash
# Create Azure OpenAI resource
az cognitiveservices account create \
  --name "e2b-openai-service" \
  --resource-group "e2b-converter-rg" \
  --location "East US" \
  --kind "OpenAI" \
  --sku "S0"

# Deploy GPT-4 model
az cognitiveservices account deployment create \
  --name "e2b-openai-service" \
  --resource-group "e2b-converter-rg" \
  --deployment-name "gpt-4-32k" \
  --model-name "gpt-4-32k" \
  --model-version "0613" \
  --scale-type "Standard"
```

#### **1.2 Azure Form Recognizer**
```bash
# Create Form Recognizer resource
az cognitiveservices account create \
  --name "e2b-form-recognizer" \
  --resource-group "e2b-converter-rg" \
  --location "East US" \
  --kind "FormRecognizer" \
  --sku "S0"
```

#### **1.3 Azure AI Studio Setup**
```bash
# Create AI Studio workspace
az ml workspace create \
  --name "e2b-ai-workspace" \
  --resource-group "e2b-converter-rg" \
  --location "East US"
```

#### **1.4 Azure App Service for Streamlit**
```bash
# Create App Service Plan
az appservice plan create \
  --name "e2b-converter-plan" \
  --resource-group "e2b-converter-rg" \
  --location "East US" \
  --sku "B1" \
  --is-linux

# Create Web App
az webapp create \
  --name "e2b-converter-app" \
  --resource-group "e2b-converter-rg" \
  --plan "e2b-converter-plan" \
  --runtime "PYTHON|3.11"
```

### **Step 2: Azure AI Agent Configuration**

#### **2.1 Create Custom AI Agent in Azure AI Studio**
```python
# AI Agent Configuration Script
import json
from azure.ai.ml import MLClient
from azure.identity import DefaultAzureCredential

# Agent definition
e2b_agent_config = {
    "name": "e2b-edps-compliance-agent",
    "description": "Specialized agent for E2B R3 to EDPS conversion and compliance validation",
    "instructions": """
    You are an expert AI agent specializing in pharmaceutical E2B R3 XML processing and EDPS compliance.
    
    Your primary functions:
    1. Analyze E2B R3 XML structure and identify personal data fields
    2. Validate MSK null flavor application according to GVP Module VI Addendum II
    3. Ensure compliance with EudraVigilance submission requirements
    4. Generate detailed compliance reports
    
    Key knowledge areas:
    - ICH E2B(R3) data elements and structure
    - GVP Module VI Addendum II requirements
    - EDPS privacy guidelines
    - EudraVigilance submission standards
    - HL7 null flavor specifications
    
    Always prioritize patient privacy while maintaining clinical data integrity.
    """,
    "model": "gpt-4-32k",
    "tools": [
        {
            "type": "code_interpreter",
            "description": "XML parsing and analysis"
        },
        {
            "type": "function",
            "function": {
                "name": "validate_xml_structure",
                "description": "Validate E2B R3 XML structure and compliance"
            }
        }
    ],
    "metadata": {
        "regulation": "GVP Module VI Addendum II",
        "effective_date": "2025-07-25",
        "compliance_standard": "EDPS Recommended Format"
    }
}

# Deploy agent
ml_client = MLClient.from_config(DefaultAzureCredential())
ml_client.agents.create_or_update(e2b_agent_config)
```

#### **2.2 Agent Function Definitions**
```python
# Custom functions for the AI agent
agent_functions = {
    "validate_xml_structure": {
        "code": """
def validate_xml_structure(xml_content):
    import xml.etree.ElementTree as ET
    
    try:
        root = ET.fromstring(xml_content)
        
        # Check for E2B R3 required elements
        required_elements = [
            'ichicsrmessageheader',
            'safetyreport',
            'patient',
            'reaction'
        ]
        
        validation_results = {
            'valid_structure': True,
            'missing_elements': [],
            'msk_fields_found': [],
            'compliance_score': 0.0
        }
        
        # Validate structure
        for element in required_elements:
            if root.find(f".//{element}") is None:
                validation_results['missing_elements'].append(element)
                validation_results['valid_structure'] = False
        
        # Check for MSK null flavors
        msk_elements = root.findall(".//*[@nullFlavor='MSK']")
        validation_results['msk_fields_found'] = [elem.tag for elem in msk_elements]
        
        # Calculate compliance score
        expected_msk_fields = 24
        found_msk_fields = len(validation_results['msk_fields_found'])
        validation_results['compliance_score'] = min(found_msk_fields / expected_msk_fields, 1.0)
        
        return validation_results
        
    except ET.ParseError as e:
        return {'error': f'XML parsing error: {str(e)}'}
        """
    }
}
```

### **Step 3: Streamlit App Configuration**

#### **3.1 Azure Secrets Configuration**
Create `.streamlit/secrets.toml`:
```toml
[azure]
# Azure OpenAI
AZURE_OPENAI_ENDPOINT = "https://e2b-openai-service.openai.azure.com/"
AZURE_OPENAI_KEY = "your-openai-key-here"
AZURE_OPENAI_API_VERSION = "2024-02-15-preview"
AZURE_OPENAI_DEPLOYMENT = "gpt-4-32k"

# Azure Form Recognizer
AZURE_FORM_RECOGNIZER_ENDPOINT = "https://e2b-form-recognizer.cognitiveservices.azure.com/"
AZURE_FORM_RECOGNIZER_KEY = "your-form-recognizer-key-here"

# Azure AI Agent
AZURE_AI_AGENT_ENDPOINT = "https://e2b-ai-workspace.openai.azure.com/openai/assistants"
AZURE_AI_AGENT_KEY = "your-ai-agent-key-here"
AZURE_AI_AGENT_ID = "asst_your-agent-id"

# Azure Text Analytics
AZURE_TEXT_ANALYTICS_ENDPOINT = "https://e2b-text-analytics.cognitiveservices.azure.com/"
AZURE_TEXT_ANALYTICS_KEY = "your-text-analytics-key-here"

# Azure Resource Configuration
AZURE_SUBSCRIPTION_ID = "your-subscription-id"
AZURE_RESOURCE_GROUP = "e2b-converter-rg"
AZURE_TENANT_ID = "your-tenant-id"
```

#### **3.2 Requirements.txt for Azure Deployment**
```txt
streamlit==1.28.0
azure-ai-openai==1.3.0
azure-cognitiveservices-vision-formrecognizer==3.3.0
azure-ai-textanalytics==5.3.0
azure-identity==1.15.0
azure-keyvault-secrets==4.7.0
azure-storage-blob==12.19.0
pandas==2.1.0
lxml==4.9.3
python-dotenv==1.0.0
aiohttp==3.9.0
asyncio-extras==1.3.2
xmltodict==0.13.0
reportlab==4.0.4
```

### **Step 4: Azure Key Vault Integration**

#### **4.1 Create Key Vault**
```bash
# Create Key Vault
az keyvault create \
  --name "e2b-converter-vault" \
  --resource-group "e2b-converter-rg" \
  --location "East US" \
  --sku "standard"

# Add secrets
az keyvault secret set \
  --vault-name "e2b-converter-vault" \
  --name "AZURE-OPENAI-KEY" \
  --value "your-openai-key"

az keyvault secret set \
  --vault-name "e2b-converter-vault" \
  --name "AZURE-FORM-RECOGNIZER-KEY" \
  --value "your-form-recognizer-key"
```

#### **4.2 Key Vault Integration Code**
```python
from azure.keyvault.secrets import SecretClient
from azure.identity import DefaultAzureCredential

class AzureSecretManager:
    def __init__(self, vault_url):
        self.credential = DefaultAzureCredential()
        self.client = SecretClient(vault_url=vault_url, credential=self.credential)
    
    def get_secret(self, secret_name):
        """Retrieve secret from Azure Key Vault"""
        try:
            secret = self.client.get_secret(secret_name)
            return secret.value
        except Exception as e:
            st.error(f"Error retrieving secret {secret_name}: {str(e)}")
            return None
    
    def get_azure_config(self):
        """Get all Azure configuration from Key Vault"""
        return {
            "openai_endpoint": self.get_secret("AZURE-OPENAI-ENDPOINT"),
            "openai_key": self.get_secret("AZURE-OPENAI-KEY"),
            "form_recognizer_endpoint": self.get_secret("AZURE-FORM-RECOGNIZER-ENDPOINT"),
            "form_recognizer_key": self.get_secret("AZURE-FORM-RECOGNIZER-KEY"),
            "ai_agent_endpoint": self.get_secret("AZURE-AI-AGENT-ENDPOINT"),
            "ai_agent_key": self.get_secret("AZURE-AI-AGENT-KEY")
        }
```

### **Step 5: Azure DevOps CI/CD Pipeline**

#### **5.1 Azure DevOps Pipeline YAML**
```yaml
# azure-pipelines.yml
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  azureServiceConnection: 'azure-service-connection'
  webAppName: 'e2b-converter-app'
  resourceGroupName: 'e2b-converter-rg'

stages:
- stage: Build
  displayName: 'Build Application'
  jobs:
  - job: Build
    displayName: 'Build Job'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.11'
        displayName: 'Use Python 3.11'

    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install dependencies'

    - script: |
        python -m pytest tests/ --junitxml=test-results.xml
      displayName: 'Run tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFiles: 'test-results.xml'
        testRunTitle: 'Python Tests'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '.'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'

- stage: Deploy
  displayName: 'Deploy to Azure'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: 'Deploy Job'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(azureServiceConnection)
              appType: 'webAppLinux'
              appName: $(webAppName)
              resourceGroupName: $(resourceGroupName)
              package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              runtimeStack: 'PYTHON|3.11'
              startupCommand: 'streamlit run app.py --server.port 8000 --server.address 0.0.0.0'
```

#### **5.2 Application Configuration for Azure**
```python
# config.py for Azure deployment
import os
from azure.identity import DefaultAzureCredential
from azure.keyvault.secrets import SecretClient

class AzureConfig:
    def __init__(self):
        self.is_azure_deployment = os.getenv('WEBSITE_SITE_NAME') is not None
        
        if self.is_azure_deployment:
            # Running on Azure App Service
            self.vault_url = f"https://{os.getenv('KEY_VAULT_NAME')}.vault.azure.net/"
            self.secret_manager = AzureSecretManager(self.vault_url)
            self.config = self.secret_manager.get_azure_config()
        else:
            # Local development
            self.config = {
                "openai_endpoint": st.secrets["azure"]["AZURE_OPENAI_ENDPOINT"],
                "openai_key": st.secrets["azure"]["AZURE_OPENAI_KEY"],
                "form_recognizer_endpoint": st.secrets["azure"]["AZURE_FORM_RECOGNIZER_ENDPOINT"],
                "form_recognizer_key": st.secrets["azure"]["AZURE_FORM_RECOGNIZER_KEY"],
                "ai_agent_endpoint": st.secrets["azure"]["AZURE_AI_AGENT_ENDPOINT"],
                "ai_agent_key": st.secrets["azure"]["AZURE_AI_AGENT_KEY"]
            }
    
    def get_config(self):
        return self.config
```

### **Step 6: Monitoring and Logging**

#### **6.1 Azure Application Insights Integration**
```python
from azure.monitor.opentelemetry import configure_azure_monitor
from opentelemetry import trace

class AzureMonitoring:
    def __init__(self, connection_string):
        configure_azure_monitor(connection_string=connection_string)
        self.tracer = trace.get_tracer(__name__)
    
    def track_e2b_processing(self, file_name, processing_time, success=True):
        """Track E2B processing metrics"""
        with self.tracer.start_as_current_span("e2b_processing") as span:
            span.set_attribute("file_name", file_name)
            span.set_attribute("processing_time", processing_time)
            span.set_attribute("success", success)
            span.set_attribute("regulation", "GVP Module VI Addendum II")
    
    def track_azure_ai_usage(self, service_name, tokens_used, confidence_score):
        """Track Azure AI service usage"""
        with self.tracer.start_as_current_span("azure_ai_usage") as span:
            span.set_attribute("service", service_name)
            span.set_attribute("tokens_used", tokens_used)
            span.set_attribute("confidence_score", confidence_score)
```

#### **6.2 Resource Usage Monitoring**
```python
from azure.mgmt.monitor import MonitorManagementClient
from azure.mgmt.cognitiveservices import CognitiveServicesManagementClient

class AzureResourceMonitor:
    def __init__(self, subscription_id, credential):
        self.monitor_client = MonitorManagementClient(credential, subscription_id)
        self.cognitive_client = CognitiveServicesManagementClient(credential, subscription_id)
    
    def get_openai_usage(self, resource_group, account_name):
        """Get Azure OpenAI usage metrics"""
        metrics = self.monitor_client.metrics.list(
            resource_uri=f"/subscriptions/{self.subscription_id}/resourceGroups/{resource_group}/providers/Microsoft.CognitiveServices/accounts/{account_name}",
            metricnames="TotalTokens,TotalCalls"
        )
        return metrics
    
    def get_form_recognizer_usage(self, resource_group, account_name):
        """Get Form Recognizer usage metrics"""
        metrics = self.monitor_client.metrics.list(
            resource_uri=f"/subscriptions/{self.subscription_id}/resourceGroups/{resource_group}/providers/Microsoft.CognitiveServices/accounts/{account_name}",
            metricnames="TotalCalls,ProcessedPages"
        )
        return metrics
```

### **Step 7: Security and Compliance**

#### **7.1 Azure Security Configuration**
```python
# security_config.py
class AzureSecurityConfig:
    def __init__(self):
        self.rbac_roles = {
            "e2b_processor": [
                "Cognitive Services User",
                "Key Vault Secrets User",
                "Storage Blob Data Reader"
            ],
            "compliance_auditor": [
                "Reader",
                "Key Vault Secrets User"
            ]
        }
        
        self.network_security = {
            "allowed_origins": [
                "https://your-domain.com",
                "https://localhost:8501"
            ],
            "ip_whitelist": [
                "your.office.ip.range/24"
            ]
        }
    
    def configure_cors(self, app):
        """Configure CORS for Streamlit app"""
        app.add_middleware(
            CORSMiddleware,
            allow_origins=self.network_security["allowed_origins"],
            allow_credentials=True,
            allow_methods=["GET", "POST"],
            allow_headers=["*"]
        )
```

#### **7.2 Data Privacy Controls**
```python
class DataPrivacyControls:
    def __init__(self):
        self.retention_policy = {
            "uploaded_files": "24_hours",
            "processing_logs": "90_days",
            "azure_ai_logs": "30_days"
        }
        
        self.encryption_settings = {
            "at_rest": "AES-256",
            "in_transit": "TLS 1.3",
            "key_management": "Azure Key Vault"
        }
    
    def sanitize_logs(self, log_data):
        """Remove sensitive data from logs"""
        # Remove patient identifiers, phone numbers, emails
        sensitive_patterns = [
            r'\b\d{3}-\d{2}-\d{4}\b',  # SSN pattern
            r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b',  # Email
            r'\b\d{3}-\d{3}-\d{4}\b'   # Phone
        ]
        
        for pattern in sensitive_patterns:
            log_data = re.sub(pattern, '[REDACTED]', log_data)
        
        return log_data
```

### **Step 8: Testing and Validation**

#### **8.1 Azure AI Testing Framework**
```python
# test_azure_ai.py
import pytest
import asyncio
from unittest.mock import Mock, patch

class TestAzureAIIntegration:
    @pytest.fixture
    def mock_azure_config(self):
        return {
            "openai_endpoint": "https://test-openai.azure.com/",
            "openai_key": "test-key",
            "form_recognizer_endpoint": "https://test-fr.azure.com/",
            "form_recognizer_key": "test-key"
        }
    
    @pytest.mark.asyncio
    async def test_xml_analysis(self, mock_azure_config):
        """Test Azure OpenAI XML analysis"""
        with patch('azure.ai.openai.AzureOpenAI') as mock_client:
            mock_response = Mock()
            mock_response.choices[0].message.content = '{"identified_fields": ["D.1", "D.3"]}'
            mock_client.return_value.chat.completions.create.return_value = mock_response
            
            processor = AzureAIXMLProcessor(mock_azure_config)
            result = await processor.analyze_e2b_structure("<xml>test</xml>")
            
            assert "identified_fields" in result
            assert len(result["identified_fields"]) == 2
    
    def test_form_recognizer_integration(self, mock_azure_config):
        """Test Azure Form Recognizer integration"""
        with patch('azure.cognitiveservices.vision.formrecognizer.FormRecognizerClient') as mock_client:
            mock_result = Mock()
            mock_result.pages = []
            mock_client.return_value.begin_recognize_content.return_value.result.return_value = mock_result
            
            processor = AzureFormRecognizerProcessor(mock_azure_config)
            result = processor.extract_xml_structure("<xml>test</xml>")
            
            assert isinstance(result, dict)
```

#### **8.2 End-to-End Validation**
```python
def validate_e2b_edps_conversion(original_xml, converted_xml):
    """Comprehensive validation of E2B to EDPS conversion"""
    validation_results = {
        "structure_preserved": False,
        "msk_fields_applied": False,
        "clinical_data_intact": False,
        "compliance_score": 0.0,
        "errors": []
    }
    
    try:
        # Parse both XMLs
        original_root = ET.fromstring(original_xml)
        converted_root = ET.fromstring(converted_xml)
        
        # Check structure preservation
        if original_root.tag == converted_root.tag:
            validation_results["structure_preserved"] = True
        
        # Check MSK fields
        msk_elements = converted_root.findall(".//*[@nullFlavor='MSK']")
        if len(msk_elements) >= 20:  # Expecting most of 24 fields
            validation_results["msk_fields_applied"] = True
        
        # Check clinical data preservation
        clinical_elements = [
            "adverseEvent",
            "medicinalProduct",
            "dose",
            "outcome"
        ]
        
        clinical_preserved = all(
            converted_root.find(f".//{elem}") is not None 
            for elem in clinical_elements
        )
        validation_results["clinical_data_intact"] = clinical_preserved
        
        # Calculate compliance score
        total_checks = 3
        passed_checks = sum([
            validation_results["structure_preserved"],
            validation_results["msk_fields_applied"],
            validation_results["clinical_data_intact"]
        ])
        validation_results["compliance_score"] = passed_checks / total_checks
        
    except Exception as e:
        validation_results["errors"].append(str(e))
    
    return validation_results
```

### **Step 9: Production Deployment Checklist**

#### **9.1 Pre-Deployment Checklist**
- [ ] Azure OpenAI service deployed with GPT-4 model
- [ ] Azure Form Recognizer service configured
- [ ] Azure AI Agent created and tested
- [ ] Key Vault secrets configured
- [ ] App Service created with Python 3.11 runtime
- [ ] Application Insights enabled
- [ ] RBAC permissions configured
- [ ] Network security rules applied
- [ ] SSL certificate installed
- [ ] Domain name configured
- [ ] Backup and disaster recovery plan
- [ ] Monitoring and alerting setup

#### **9.2 Performance Optimization**
```python
# performance_config.py
class AzurePerformanceConfig:
    def __init__(self):
        self.caching_config = {
            "redis_endpoint": "your-redis-cache.azure.com",
            "cache_duration": 3600,  # 1 hour
            "cache_keys": [
                "xml_analysis_results",
                "form_recognizer_results",
                "compliance_validation"
            ]
        }
        
        self.optimization_settings = {
            "async_processing": True,
            "batch_size": 10,
            "connection_pooling": True,
            "request_timeout": 300
        }
```

### **Step 10: Final Deployment Commands**

```bash
# Set up environment variables
az webapp config appsettings set \
  --name "e2b-converter-app" \
  --resource-group "e2b-converter-rg" \
  --settings \
    AZURE_OPENAI_ENDPOINT="https://e2b-openai-service.openai.azure.com/" \
    KEY_VAULT_NAME="e2b-converter-vault" \
    APPLICATIONINSIGHTS_CONNECTION_STRING="your-app-insights-connection-string"

# Deploy the application
az webapp deployment source config-zip \
  --name "e2b-converter-app" \
  --resource-group "e2b-converter-rg" \
  --src "deployment.zip"

# Enable continuous deployment
az webapp deployment source config \
  --name "e2b-converter-app" \
  --resource-group "e2b-converter-rg" \
  --repo-url "https://github.com/your-repo/e2b-converter" \
  --branch "main" \
  --manual-integration
```

This comprehensive guide provides everything needed to deploy and configure your Azure AI-powered E2B to EDPS converter with full enterprise-grade security, monitoring, and compliance features.